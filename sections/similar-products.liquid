{{ 'section-similar-products.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{% if product %}
  {% assign fallback_products = collections.all.products
    | where: 'product_type', product.product_type
    | where: 'id', '!=', product.id
    | slice: 0, section.settings.limit
  %}

  {% if fallback_products.size == 0 %}
    {% assign fallback_products = collections.all.products
      | where: 'id', '!=', product.id
      | slice: 0, section.settings.limit
    %}
  {% endif %}

  {% assign fallback_products_array = '' %}
  {% for related in fallback_products %}
    {% capture item %}
      {
        "title": {{ related.title | json }},
        "url": {{ related.url | json }},
        "price": {{ related.price | json }},
        "featured_image": {{ related.featured_image | image_url: width: 600 | json }}
      }
    {% endcapture %}
    {% assign fallback_products_array = fallback_products_array | append: item %}
    {% unless forloop.last %}{% assign fallback_products_array = fallback_products_array | append: ',' %}{% endunless %}
  {% endfor %}

  <div class="similar-products page-width section-{{ section.id }}-padding color-{{ section.settings.color_scheme }} {% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
    <h2 class="section-title">Similar Products</h2>
    <div
      id="SimilarProducts-{{ product.id }}"
      class="similar-products__grid"
      data-fallback-products="[{{ fallback_products_array }}]"
    ></div>
  </div>

  <script>
    const container = document.getElementById('SimilarProducts-{{ product.id }}');

    fetch(`/recommendations/products.json?product_id={{ product.id }}&limit={{ section.settings.limit }}`)
      .then((res) => res.json())
      .then((data) => {
        let products = data.products;

        if (products.length === 0) {
          console.warn('‚ö†Ô∏è No recommended products ‚Äî using fallback.');
          try {
            const fallbackData = container.dataset.fallbackProducts;
            console.log('üì¶ Fallback raw string:', fallbackData);
            products = JSON.parse(fallbackData || '[]');
            console.log('üì¶ Parsed fallback products:', products);
          } catch (err) {
            console.error('‚ùå Fallback JSON parse failed:', err);
          }
        }

        if (products.length > 0) {
          products.forEach((product) => {
            const productCard = `
              <a href="${product.url}" class="similar-products__card-link">
                <div class="similar-products__card">
                  <div class="similar-products__card-image-wrapper">
                    <img class="similar-products__card-image" src="${product.featured_image}" alt="${product.title}" />
                    <span class="similar-products__card-badge">In-store</span>
                  </div>
                  <div class="similar-products__card-content">
                    <h4 class="similar-products__card-title">${product.title}</h4>
                    <p class="similar-products__card-price">¬£${
                      (product.price / 100).toFixed ? (product.price / 100).toFixed(2) : product.price
                    }</p>
                  </div>
                </div>
              </a>`;
            container.insertAdjacentHTML('beforeend', productCard);
          });
        } else {
          container.innerHTML = '<p>No similar products found.</p>';
        }
      })
      .catch((err) => {
        console.error('‚ùå Error fetching recommendations:', err);
      });
  </script>
{% endif %}

{% schema %}
{
  "name": "Similar Products",
  "tag": "section",
  "class": "section similar-products-section",
  "limit": 1,
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "range",
      "id": "limit",
      "label": "Number of similar products",
      "min": 2,
      "max": 8,
      "step": 1,
      "default": 4
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Similar Products (Auto)",
      "category": "Product"
    }
  ]
}
{% endschema %}
